
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
import numpy as np
from bitarray import bitarray


class yc_toaster_toaster__toaster(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module toaster - based on the path /toaster. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for all toaster database objects.
  """
  __slots__ = (
  '_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__toasterManufacturer', '__toasterModelNumber',
  '__toasterStatus',)

  _yang_name = 'toaster'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__toasterManufacturer = YANGDynClass(
      base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
      yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
      register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
      yang_type='DisplayString')
    self.__toasterModelNumber = YANGDynClass(
      base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
      yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
      register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
      yang_type='DisplayString')
    self.__toasterStatus = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                                 restriction_arg={u'down': {'value': 2},
                                                                                  u'up': {'value': 1}}, ), is_leaf=True,
                                        yang_name="toasterStatus", parent=self, path_helper=self._path_helper,
                                        extmethods=self._extmethods, register_paths=True,
                                        namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                        yang_type='enumeration')

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path() + [self._yang_name]
    else:
      return [u'toaster']

  def _get_toasterManufacturer(self):
    """
    Getter method for toasterManufacturer, mapped from YANG variable /toaster/toasterManufacturer (DisplayString)

    YANG Description: The name of the toaster's manufacturer. For instance, 
 Microsoft Toaster.
    """
    return self.__toasterManufacturer

  def _set_toasterManufacturer(self, v, load=False):
    """
    Setter method for toasterManufacturer, mapped from YANG variable /toaster/toasterManufacturer (DisplayString)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_toasterManufacturer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_toasterManufacturer() directly.

    YANG Description: The name of the toaster's manufacturer. For instance, 
 Microsoft Toaster.
    """
    try:
      t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}),
                       is_leaf=True, yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper,
                       extmethods=self._extmethods, register_paths=True,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                       yang_type='DisplayString')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """toasterManufacturer must be of a type compatible with DisplayString""",
        'defined-type': "toaster:DisplayString",
        'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True, yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='DisplayString')""",
      })

    self.__toasterManufacturer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_toasterManufacturer(self):
    self.__toasterManufacturer = YANGDynClass(
      base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
      yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
      register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
      yang_type='DisplayString')

  def _get_toasterModelNumber(self):
    """
    Getter method for toasterModelNumber, mapped from YANG variable /toaster/toasterModelNumber (DisplayString)

    YANG Description: The name of the toaster's model. For instance,
Radiant Automatic.
    """
    return self.__toasterModelNumber

  def _set_toasterModelNumber(self, v, load=False):
    """
    Setter method for toasterModelNumber, mapped from YANG variable /toaster/toasterModelNumber (DisplayString)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_toasterModelNumber is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_toasterModelNumber() directly.

    YANG Description: The name of the toaster's model. For instance,
Radiant Automatic.
    """
    try:
      t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}),
                       is_leaf=True, yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper,
                       extmethods=self._extmethods, register_paths=True,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                       yang_type='DisplayString')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """toasterModelNumber must be of a type compatible with DisplayString""",
        'defined-type': "toaster:DisplayString",
        'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True, yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='DisplayString')""",
      })

    self.__toasterModelNumber = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_toasterModelNumber(self):
    self.__toasterModelNumber = YANGDynClass(
      base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
      yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
      register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
      yang_type='DisplayString')

  def _get_toasterStatus(self):
    """
    Getter method for toasterStatus, mapped from YANG variable /toaster/toasterStatus (enumeration)

    YANG Description: This variable indicates the current state of 
the toaster.
    """
    return self.__toasterStatus

  def _set_toasterStatus(self, v, load=False):
    """
    Setter method for toasterStatus, mapped from YANG variable /toaster/toasterStatus (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_toasterStatus is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_toasterStatus() directly.

    YANG Description: This variable indicates the current state of 
the toaster.
    """
    try:
      t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                   restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}}, ),
                       is_leaf=True, yang_name="toasterStatus", parent=self, path_helper=self._path_helper,
                       extmethods=self._extmethods, register_paths=True,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                       yang_type='enumeration')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """toasterStatus must be of a type compatible with enumeration""",
        'defined-type': "toaster:enumeration",
        'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="toasterStatus", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='enumeration')""",
      })

    self.__toasterStatus = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_toasterStatus(self):
    self.__toasterStatus = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                                 restriction_arg={u'down': {'value': 2},
                                                                                  u'up': {'value': 1}}, ), is_leaf=True,
                                        yang_name="toasterStatus", parent=self, path_helper=self._path_helper,
                                        extmethods=self._extmethods, register_paths=True,
                                        namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                        yang_type='enumeration')

  toasterManufacturer = property(_get_toasterManufacturer)
  toasterModelNumber = property(_get_toasterModelNumber)
  toasterStatus = property(_get_toasterStatus)

  _pyangbind_elements = {'toasterManufacturer': toasterManufacturer, 'toasterModelNumber': toasterModelNumber,
                         'toasterStatus': toasterStatus,}


class toaster(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module toaster - based on the path /toaster. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: YANG version of the TOASTER-MIB.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__toaster',)

  _yang_name = 'toaster'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__toaster = YANGDynClass(base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster",
                                  parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                                  register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                                  defining_module='toaster', yang_type='container')

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path() + [self._yang_name]
    else:
      return []

  def _get_toaster(self):
    """
    Getter method for toaster, mapped from YANG variable /toaster (container)

    YANG Description: Top-level container for all toaster database objects.
    """
    return self.__toaster

  def _set_toaster(self, v, load=False):
    """
    Setter method for toaster, mapped from YANG variable /toaster (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_toaster is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_toaster() directly.

    YANG Description: Top-level container for all toaster database objects.
    """
    try:
      t = YANGDynClass(v, base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster", parent=self,
                       path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                       yang_type='container')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """toaster must be of a type compatible with container""",
        'defined-type': "container",
        'generated-type': """YANGDynClass(base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='container')""",
      })

    self.__toaster = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_toaster(self):
    self.__toaster = YANGDynClass(base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster",
                                  parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                                  register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                                  defining_module='toaster', yang_type='container')

  toaster = property(_get_toaster, _set_toaster)

  _pyangbind_elements = {'toaster': toaster,}


class yc_input_toaster__toaster_rpc_make_toast_input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module toaster - based on the path /toaster_rpc/make-toast/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = (
  '_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__toasterDoneness', '__toasterToastType',)

  _yang_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__toasterToastType = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                                    restriction_arg={
                                                                      u'white-bread': {'@module': u'toaster',
                                                                                       '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:wheat-bread': {'@module': u'toaster',
                                                                                             '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'frozen-bagel': {'@module': u'toaster',
                                                                                        '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'wonder-bread': {'@module': u'toaster',
                                                                                        '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:frozen-bagel': {'@module': u'toaster',
                                                                                              '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:hash-brown': {'@module': u'toaster',
                                                                                            '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:wonder-bread': {'@module': u'toaster',
                                                                                              '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:white-bread': {'@module': u'toaster',
                                                                                             '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'hash-brown': {'@module': u'toaster',
                                                                                      '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'frozen-waffle': {'@module': u'toaster',
                                                                                         '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:frozen-waffle': {'@module': u'toaster',
                                                                                               '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'wheat-bread': {'@module': u'toaster',
                                                                                       '@namespace': u'http://netconfcentral.org/ns/toaster'}}, ),
                                           default=unicode("toast:wheat-bread"), is_leaf=True,
                                           yang_name="toasterToastType", parent=self, path_helper=self._path_helper,
                                           extmethods=self._extmethods, register_paths=False,
                                           namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                           yang_type='identityref')
    self.__toasterDoneness = YANGDynClass(
      base=RestrictedClassType(base_type=np.uint32, restriction_dict={'range': [u'1 .. 10']}), default=np.uint32(5),
      is_leaf=True, yang_name="toasterDoneness", parent=self, path_helper=self._path_helper,
      extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster',
      defining_module='toaster', yang_type='uint32')

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path() + [self._yang_name]
    else:
      return [u'toaster_rpc', u'make-toast', u'input']

  def _get_toasterDoneness(self):
    """
    Getter method for toasterDoneness, mapped from YANG variable /toaster_rpc/make_toast/input/toasterDoneness (uint32)

    YANG Description: This variable controls how well-done is the 
ensuing toast. It should be on a scale of 1 to 10.
Toast made at 10 generally is considered unfit 
for human consumption; toast made at 1 is warmed 
lightly.
    """
    return self.__toasterDoneness

  def _set_toasterDoneness(self, v, load=False):
    """
    Setter method for toasterDoneness, mapped from YANG variable /toaster_rpc/make_toast/input/toasterDoneness (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_toasterDoneness is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_toasterDoneness() directly.

    YANG Description: This variable controls how well-done is the 
ensuing toast. It should be on a scale of 1 to 10.
Toast made at 10 generally is considered unfit 
for human consumption; toast made at 1 is warmed 
lightly.
    """
    try:
      t = YANGDynClass(v, base=RestrictedClassType(base_type=np.uint32, restriction_dict={'range': [u'1 .. 10']}),
                       default=np.uint32(5), is_leaf=True, yang_name="toasterDoneness", parent=self,
                       path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='uint32')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """toasterDoneness must be of a type compatible with uint32""",
        'defined-type': "uint32",
        'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=np.uint32, restriction_dict={'range': [u'1 .. 10']}), default=np.uint32(5), is_leaf=True, yang_name="toasterDoneness", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='uint32')""",
      })

    self.__toasterDoneness = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_toasterDoneness(self):
    self.__toasterDoneness = YANGDynClass(
      base=RestrictedClassType(base_type=np.uint32, restriction_dict={'range': [u'1 .. 10']}), default=np.uint32(5),
      is_leaf=True, yang_name="toasterDoneness", parent=self, path_helper=self._path_helper,
      extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster',
      defining_module='toaster', yang_type='uint32')

  def _get_toasterToastType(self):
    """
    Getter method for toasterToastType, mapped from YANG variable /toaster_rpc/make_toast/input/toasterToastType (identityref)

    YANG Description: This variable informs the toaster of the type of 
material that is being toasted. The toaster 
uses this information, combined with 
toasterDoneness, to compute for how 
long the material must be toasted to achieve 
the required doneness.
    """
    return self.__toasterToastType

  def _set_toasterToastType(self, v, load=False):
    """
    Setter method for toasterToastType, mapped from YANG variable /toaster_rpc/make_toast/input/toasterToastType (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_toasterToastType is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_toasterToastType() directly.

    YANG Description: This variable informs the toaster of the type of 
material that is being toasted. The toaster 
uses this information, combined with 
toasterDoneness, to compute for how 
long the material must be toasted to achieve 
the required doneness.
    """
    try:
      t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={
        u'white-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'toast:wheat-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'frozen-bagel': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'wonder-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'toast:frozen-bagel': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'toast:hash-brown': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'toast:wonder-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'toast:white-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'hash-brown': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'frozen-waffle': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'toast:frozen-waffle': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'},
        u'wheat-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}}, ),
                       default=unicode("toast:wheat-bread"), is_leaf=True, yang_name="toasterToastType", parent=self,
                       path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                       yang_type='identityref')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """toasterToastType must be of a type compatible with identityref""",
        'defined-type': "toaster:identityref",
        'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'white-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'toast:wheat-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'frozen-bagel': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'wonder-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'toast:frozen-bagel': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'toast:hash-brown': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'toast:wonder-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'toast:white-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'hash-brown': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'frozen-waffle': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'toast:frozen-waffle': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}, u'wheat-bread': {'@module': u'toaster', '@namespace': u'http://netconfcentral.org/ns/toaster'}},), default=unicode("toast:wheat-bread"), is_leaf=True, yang_name="toasterToastType", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='identityref')""",
      })

    self.__toasterToastType = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_toasterToastType(self):
    self.__toasterToastType = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                                    restriction_arg={
                                                                      u'white-bread': {'@module': u'toaster',
                                                                                       '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:wheat-bread': {'@module': u'toaster',
                                                                                             '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'frozen-bagel': {'@module': u'toaster',
                                                                                        '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'wonder-bread': {'@module': u'toaster',
                                                                                        '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:frozen-bagel': {'@module': u'toaster',
                                                                                              '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:hash-brown': {'@module': u'toaster',
                                                                                            '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:wonder-bread': {'@module': u'toaster',
                                                                                              '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:white-bread': {'@module': u'toaster',
                                                                                             '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'hash-brown': {'@module': u'toaster',
                                                                                      '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'frozen-waffle': {'@module': u'toaster',
                                                                                         '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'toast:frozen-waffle': {'@module': u'toaster',
                                                                                               '@namespace': u'http://netconfcentral.org/ns/toaster'},
                                                                      u'wheat-bread': {'@module': u'toaster',
                                                                                       '@namespace': u'http://netconfcentral.org/ns/toaster'}}, ),
                                           default=unicode("toast:wheat-bread"), is_leaf=True,
                                           yang_name="toasterToastType", parent=self, path_helper=self._path_helper,
                                           extmethods=self._extmethods, register_paths=False,
                                           namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                           yang_type='identityref')

  toasterDoneness = property(_get_toasterDoneness, _set_toasterDoneness)
  toasterToastType = property(_get_toasterToastType, _set_toasterToastType)

  _pyangbind_elements = {'toasterDoneness': toasterDoneness, 'toasterToastType': toasterToastType,}


class yc_make_toast_toaster__toaster_rpc_make_toast(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module toaster - based on the path /toaster_rpc/make-toast. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Make some toast.
The toastDone notification will be sent when 
the toast is finished.
An 'in-use' error will be returned if toast
is already being made.
A 'resource-denied' error will be returned 
if the toaster service is disabled.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__input',)

  _yang_name = 'make-toast'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__input = YANGDynClass(base=yc_input_toaster__toaster_rpc_make_toast_input, is_leaf=True, yang_name="input",
                                parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                                register_paths=False, namespace='http://netconfcentral.org/ns/toaster',
                                defining_module='toaster', yang_type='input')

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path() + [self._yang_name]
    else:
      return [u'toaster_rpc', u'make-toast']

  def _get_input(self):
    """
    Getter method for input, mapped from YANG variable /toaster_rpc/make_toast/input (input)
    """
    return self.__input

  def _set_input(self, v, load=False):
    """
    Setter method for input, mapped from YANG variable /toaster_rpc/make_toast/input (input)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input() directly.
    """
    try:
      t = YANGDynClass(v, base=yc_input_toaster__toaster_rpc_make_toast_input, is_leaf=True, yang_name="input",
                       parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='input')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """input must be of a type compatible with input""",
        'defined-type': "toaster:input",
        'generated-type': """YANGDynClass(base=yc_input_toaster__toaster_rpc_make_toast_input, is_leaf=True, yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='input')""",
      })

    self.__input = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input(self):
    self.__input = YANGDynClass(base=yc_input_toaster__toaster_rpc_make_toast_input, is_leaf=True, yang_name="input",
                                parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                                register_paths=False, namespace='http://netconfcentral.org/ns/toaster',
                                defining_module='toaster', yang_type='input')

  input = property(_get_input, _set_input)

  _pyangbind_elements = {'input': input,}


class yc_cancel_toast_toaster__toaster_rpc_cancel_toast(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module toaster - based on the path /toaster_rpc/cancel-toast. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Stop making toast, if any is being made.
A 'resource-denied' error will be returned 
if the toaster service is disabled.
  """
  pass


class yc_toaster_toaster__toaster_rpc(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module toaster - based on the path /toaster_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: YANG version of the TOASTER-MIB.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__make_toast', '__cancel_toast',)

  _yang_name = 'toaster'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__make_toast = YANGDynClass(base=yc_make_toast_toaster__toaster_rpc_make_toast, is_leaf=True,
                                     yang_name="make-toast", parent=self, path_helper=self._path_helper,
                                     extmethods=self._extmethods, register_paths=False,
                                     namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                     yang_type='rpc')
    self.__cancel_toast = YANGDynClass(base=yc_cancel_toast_toaster__toaster_rpc_cancel_toast, is_leaf=True,
                                       yang_name="cancel-toast", parent=self, path_helper=self._path_helper,
                                       extmethods=self._extmethods, register_paths=False,
                                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                       yang_type='rpc')

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path() + [self._yang_name]
    else:
      return [u'toaster_rpc']

  def _get_make_toast(self):
    """
    Getter method for make_toast, mapped from YANG variable /toaster_rpc/make_toast (rpc)

    YANG Description: Make some toast.
The toastDone notification will be sent when 
the toast is finished.
An 'in-use' error will be returned if toast
is already being made.
A 'resource-denied' error will be returned 
if the toaster service is disabled.
    """
    return self.__make_toast

  def _set_make_toast(self, v, load=False):
    """
    Setter method for make_toast, mapped from YANG variable /toaster_rpc/make_toast (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_make_toast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_make_toast() directly.

    YANG Description: Make some toast.
The toastDone notification will be sent when 
the toast is finished.
An 'in-use' error will be returned if toast
is already being made.
A 'resource-denied' error will be returned 
if the toaster service is disabled.
    """
    try:
      t = YANGDynClass(v, base=yc_make_toast_toaster__toaster_rpc_make_toast, is_leaf=True, yang_name="make-toast",
                       parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='rpc')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """make_toast must be of a type compatible with rpc""",
        'defined-type': "rpc",
        'generated-type': """YANGDynClass(base=yc_make_toast_toaster__toaster_rpc_make_toast, is_leaf=True, yang_name="make-toast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='rpc')""",
      })

    self.__make_toast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_make_toast(self):
    self.__make_toast = YANGDynClass(base=yc_make_toast_toaster__toaster_rpc_make_toast, is_leaf=True,
                                     yang_name="make-toast", parent=self, path_helper=self._path_helper,
                                     extmethods=self._extmethods, register_paths=False,
                                     namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                     yang_type='rpc')

  def _get_cancel_toast(self):
    """
    Getter method for cancel_toast, mapped from YANG variable /toaster_rpc/cancel_toast (rpc)

    YANG Description: Stop making toast, if any is being made.
A 'resource-denied' error will be returned 
if the toaster service is disabled.
    """
    return self.__cancel_toast

  def _set_cancel_toast(self, v, load=False):
    """
    Setter method for cancel_toast, mapped from YANG variable /toaster_rpc/cancel_toast (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cancel_toast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cancel_toast() directly.

    YANG Description: Stop making toast, if any is being made.
A 'resource-denied' error will be returned 
if the toaster service is disabled.
    """
    try:
      t = YANGDynClass(v, base=yc_cancel_toast_toaster__toaster_rpc_cancel_toast, is_leaf=True,
                       yang_name="cancel-toast", parent=self, path_helper=self._path_helper,
                       extmethods=self._extmethods, register_paths=False,
                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='rpc')
    except (TypeError, ValueError):
      raise ValueError({
        'error-string': """cancel_toast must be of a type compatible with rpc""",
        'defined-type': "rpc",
        'generated-type': """YANGDynClass(base=yc_cancel_toast_toaster__toaster_rpc_cancel_toast, is_leaf=True, yang_name="cancel-toast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='rpc')""",
      })

    self.__cancel_toast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cancel_toast(self):
    self.__cancel_toast = YANGDynClass(base=yc_cancel_toast_toaster__toaster_rpc_cancel_toast, is_leaf=True,
                                       yang_name="cancel-toast", parent=self, path_helper=self._path_helper,
                                       extmethods=self._extmethods, register_paths=False,
                                       namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                                       yang_type='rpc')

  make_toast = property(_get_make_toast, _set_make_toast)
  cancel_toast = property(_get_cancel_toast, _set_cancel_toast)

  _pyangbind_elements = {'make_toast': make_toast, 'cancel_toast': cancel_toast,}
