from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
import numpy as np
from bitarray import bitarray


class yc_toaster_toaster__toaster(PybindBase):
    """
    This class was auto-generated by the PythonClass plugin for PYANG
    from YANG module toaster - based on the path /toaster. Each member element of
    the container is represented as a class variable - with a specific
    YANG type.

    YANG Description: Top-level container for all toaster database objects.
    """
    __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__toasterManufacturer',
                 '__toasterModelNumber', '__toasterStatus',)

    _yang_name = 'toaster'

    _pybind_generated_by = 'container'

    def __init__(self, *args, **kwargs):

        self._path_helper = False

        self._extmethods = False
        self.__toasterManufacturer = YANGDynClass(
            base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
            yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
            register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
            yang_type='DisplayString')
        self.__toasterModelNumber = YANGDynClass(
            base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
            yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
            register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
            yang_type='DisplayString')
        self.__toasterStatus = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                                     restriction_arg={u'down': {'value': 2},
                                                                                      u'up'  : {'value': 1}}, ),
                                            is_leaf=True, yang_name="toasterStatus", parent=self,
                                            path_helper=self._path_helper, extmethods=self._extmethods,
                                            register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                                            defining_module='toaster', yang_type='enumeration')

        load = kwargs.pop("load", None)
        if args:
            if len(args) > 1:
                raise TypeError("cannot create a YANG container with >1 argument")
            all_attr = True
            for e in self._pyangbind_elements:
                if not hasattr(args[0], e):
                    all_attr = False
                    break
            if not all_attr:
                raise ValueError("Supplied object did not have the correct attributes")
            for e in self._pyangbind_elements:
                setmethod = getattr(self, "_set_%s" % e)
                if load is None:
                    setmethod(getattr(args[0], e))
                else:
                    setmethod(getattr(args[0], e), load=load)

    def _path(self):
        if hasattr(self, "_parent"):
            return self._parent._path() + [self._yang_name]
        else:
            return [u'toaster']

    def _get_toasterManufacturer(self):
        """
        Getter method for toasterManufacturer, mapped from YANG variable /toaster/toasterManufacturer (DisplayString)

        YANG Description: The name of the toaster's manufacturer. For instance,
     Microsoft Toaster.
        """
        return self.__toasterManufacturer

    def _set_toasterManufacturer(self, v, load=False):
        """
        Setter method for toasterManufacturer, mapped from YANG variable /toaster/toasterManufacturer (DisplayString)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_toasterManufacturer is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_toasterManufacturer() directly.

        YANG Description: The name of the toaster's manufacturer. For instance,
     Microsoft Toaster.
        """
        try:
            t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}),
                             is_leaf=True, yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper,
                             extmethods=self._extmethods, register_paths=True,
                             namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                             yang_type='DisplayString')
        except (TypeError, ValueError):
            raise ValueError({
                'error-string'  : """toasterManufacturer must be of a type compatible with DisplayString""",
                'defined-type'  : "toaster:DisplayString",
                'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True, yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='DisplayString')""",
            })

        self.__toasterManufacturer = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_toasterManufacturer(self):
        self.__toasterManufacturer = YANGDynClass(
            base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
            yang_name="toasterManufacturer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
            register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
            yang_type='DisplayString')

    def _get_toasterModelNumber(self):
        """
        Getter method for toasterModelNumber, mapped from YANG variable /toaster/toasterModelNumber (DisplayString)

        YANG Description: The name of the toaster's model. For instance,
    Radiant Automatic.
        """
        return self.__toasterModelNumber

    def _set_toasterModelNumber(self, v, load=False):
        """
        Setter method for toasterModelNumber, mapped from YANG variable /toaster/toasterModelNumber (DisplayString)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_toasterModelNumber is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_toasterModelNumber() directly.

        YANG Description: The name of the toaster's model. For instance,
    Radiant Automatic.
        """
        try:
            t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}),
                             is_leaf=True, yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper,
                             extmethods=self._extmethods, register_paths=True,
                             namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                             yang_type='DisplayString')
        except (TypeError, ValueError):
            raise ValueError({
                'error-string'  : """toasterModelNumber must be of a type compatible with DisplayString""",
                'defined-type'  : "toaster:DisplayString",
                'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True, yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='DisplayString')""",
            })

        self.__toasterModelNumber = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_toasterModelNumber(self):
        self.__toasterModelNumber = YANGDynClass(
            base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0 .. 255']}), is_leaf=True,
            yang_name="toasterModelNumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
            register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
            yang_type='DisplayString')

    def _get_toasterStatus(self):
        """
        Getter method for toasterStatus, mapped from YANG variable /toaster/toasterStatus (enumeration)

        YANG Description: This variable indicates the current state of
    the toaster.
        """
        return self.__toasterStatus

    def _set_toasterStatus(self, v, load=False):
        """
        Setter method for toasterStatus, mapped from YANG variable /toaster/toasterStatus (enumeration)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_toasterStatus is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_toasterStatus() directly.

        YANG Description: This variable indicates the current state of
    the toaster.
        """
        try:
            t = YANGDynClass(v, base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                         restriction_arg={u'down': {'value': 2},
                                                                          u'up'  : {'value': 1}}, ), is_leaf=True,
                             yang_name="toasterStatus", parent=self, path_helper=self._path_helper,
                             extmethods=self._extmethods, register_paths=True,
                             namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster',
                             yang_type='enumeration')
        except (TypeError, ValueError):
            raise ValueError({
                'error-string'  : """toasterStatus must be of a type compatible with enumeration""",
                'defined-type'  : "toaster:enumeration",
                'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="toasterStatus", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='enumeration')""",
            })

        self.__toasterStatus = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_toasterStatus(self):
        self.__toasterStatus = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key",
                                                                     restriction_arg={u'down': {'value': 2},
                                                                                      u'up'  : {'value': 1}}, ),
                                            is_leaf=True, yang_name="toasterStatus", parent=self,
                                            path_helper=self._path_helper, extmethods=self._extmethods,
                                            register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                                            defining_module='toaster', yang_type='enumeration')

    toasterManufacturer = property(_get_toasterManufacturer)
    toasterModelNumber = property(_get_toasterModelNumber)
    toasterStatus = property(_get_toasterStatus)

    _pyangbind_elements = {'toasterManufacturer': toasterManufacturer, 'toasterModelNumber': toasterModelNumber,
                           'toasterStatus'      : toasterStatus,}


class toaster(PybindBase):
    """
    This class was auto-generated by the PythonClass plugin for PYANG
    from YANG module toaster - based on the path /toaster. Each member element of
    the container is represented as a class variable - with a specific
    YANG type.

    YANG Description: YANG version of the TOASTER-MIB.
    """
    __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__toaster',)

    _yang_name = 'toaster'

    _pybind_generated_by = 'container'

    def __init__(self, *args, **kwargs):

        self._path_helper = False

        self._extmethods = False
        self.__toaster = YANGDynClass(base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster",
                                      parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                                      register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                                      defining_module='toaster', yang_type='container')

        load = kwargs.pop("load", None)
        if args:
            if len(args) > 1:
                raise TypeError("cannot create a YANG container with >1 argument")
            all_attr = True
            for e in self._pyangbind_elements:
                if not hasattr(args[0], e):
                    all_attr = False
                    break
            if not all_attr:
                raise ValueError("Supplied object did not have the correct attributes")
            for e in self._pyangbind_elements:
                setmethod = getattr(self, "_set_%s" % e)
                if load is None:
                    setmethod(getattr(args[0], e))
                else:
                    setmethod(getattr(args[0], e), load=load)

    def _path(self):
        if hasattr(self, "_parent"):
            return self._parent._path() + [self._yang_name]
        else:
            return []

    def _get_toaster(self):
        """
        Getter method for toaster, mapped from YANG variable /toaster (container)

        YANG Description: Top-level container for all toaster database objects.
        """
        return self.__toaster

    def _set_toaster(self, v, load=False):
        """
        Setter method for toaster, mapped from YANG variable /toaster (container)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_toaster is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_toaster() directly.

        YANG Description: Top-level container for all toaster database objects.
        """
        try:
            t = YANGDynClass(v, base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster",
                             parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                             register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                             defining_module='toaster', yang_type='container')
        except (TypeError, ValueError):
            raise ValueError({
                'error-string'  : """toaster must be of a type compatible with container""",
                'defined-type'  : "container",
                'generated-type': """YANGDynClass(base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://netconfcentral.org/ns/toaster', defining_module='toaster', yang_type='container')""",
            })

        self.__toaster = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_toaster(self):
        self.__toaster = YANGDynClass(base=yc_toaster_toaster__toaster, is_container='container', yang_name="toaster",
                                      parent=self, path_helper=self._path_helper, extmethods=self._extmethods,
                                      register_paths=True, namespace='http://netconfcentral.org/ns/toaster',
                                      defining_module='toaster', yang_type='container')

    toaster = property(_get_toaster, _set_toaster)

    _pyangbind_elements = {'toaster': toaster,}
